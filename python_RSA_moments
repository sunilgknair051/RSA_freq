
%%Randomize circles and pop--real basics%%
import random
import math

# radius of the circle
circle_r = 10
# center of the circle (x, y)
circle_x = 5
circle_y = 7

# random angle
alpha = 2 * math.pi * random.random()
# random radius
r = circle_r * math.sqrt(random.random())
# calculating coordinates
x = r * math.cos(alpha) + circle_x
y = r * math.sin(alpha) + circle_y

print("Random point", (x, y))


%%Complex viscosity addition and calc of moments%%
from __future__ import division
import xdrlib
import math
import numpy as np
import glob
import matplotlib.pyplot as plt
from matplotlib import cm 
import os.path



f = open('results/test072_Displ_Sph_066.dat','r')
lines = f.readlines()
columns = lines[0].split()
#print (lines)
x = int(columns[0])
y = int(columns[1])
z = int(columns[2])
ux = np.zeros((x,y,z),dtype = complex)
uy = np.zeros((x,y,z),dtype = complex)
uz = np.zeros((x,y,z),dtype = complex)

#print (lines)
#print (len(lines))
gridreso_SI = 1.5e-9 #np.float(Header_Info['gridreso_SI']);
rho_SI = 1e3;
Mass_per_site = rho_SI * gridreso_SI**3;

for i in range(len(lines)):
   columns = lines[i].split()
#   x = int(columns[0]) 
#   y = int(columns[1]) 
#   z = int(columns[2])
#   print (x,y,z)
#   print(columns[0],columns[1],columns[2],columns[3],\
#         columns[4],columns[5],columns[6],columns[7],columns[8])
   ux = float(columns[3]) + 1j * float(columns[4])
   print(ux)
   uy = float(columns[5]) + 1j * float(columns[6])
   uz = float(columns[7]) + 1j * float(columns[8])
   
   
#   ux[x,y,z] = float(columns[3]) + 1j * float(columns[4])
#   uy[x-1,y-1,z-1] = float(columns[5]) + 1j * float(columns[6])
#   uz[x-1,y-1,z-1] = float(columns[7]) + 1j * float(columns[8])
#   ux[i-1] = float(columns[0])
#   uy[i-1] = float(columns[1])
#   uz[i-1] = float(columns[2])
   #print (x,y,z)
#   print (ux,uy,uz)

f.close

x_avg_CM = np.average(x);
y_avg_CM = np.average(y); 
z_avg_CM = np.average(z);
    
#print(x_avg_CM,y_avg_CM,z_avg_CM)


#

def Read_Displacement_Sph(filename):
    data = np.transpose(np.loadtxt(filename))
    gridreso_SI = 1.5e-9 #np.float(Header_Info['gridreso_SI']);
    rho_SI = 1e3;
    Mass_per_site = rho_SI * gridreso_SI**3;
    x = data[0];
    y = data[1];
    z = data[2];
    ux = data[3] + 1j * data[4]
    print (ux)
    uy = data[5] + 1j * data[6]
    uz = data[7] + 1j * data[8]
    
    x_avg_CM = np.average(x);
    y_avg_CM = np.average(y); 
    z_avg_CM = np.average(z);
    
    print(x_avg_CM,y_avg_CM,z_avg_CM)
    Mom_Inertia_SI = Mass_per_site * np.sum((x-x_avg_CM)**2 + (y-y_avg_CM)**2) * gridreso_SI**2;
    # Translation
    ux_avg = np.average(ux);
    uy_avg = np.average(uy);
    uz_avg = np.average(uz);
    # Angular momentum
    L_x = Mass_per_site * (uy * (z - z_avg_CM) - uz * (y - y_avg_CM)) * gridreso_SI**2
    L_y = Mass_per_site * (uz * (x - x_avg_CM) - ux * (z - z_avg_CM)) * gridreso_SI**2
    L_z = Mass_per_site * (ux * (y - y_avg_CM) - uy * (x - x_avg_CM)) * gridreso_SI**2
    # Rotation
    Om_x = np.sum(L_x) / Mom_Inertia_SI 
    Om_y = np.sum(L_y) / Mom_Inertia_SI 
    Om_z  = np.sum(L_z) / Mom_Inertia_SI 
    return ux_avg, uy_avg, uz_avg, Om_x, Om_y, Om_z    

#f = plt.figure(figsize=(15,15))
#dropinifac = 1/5.
#plt.subplot(221); plt.plot(-dfs[int(dropinifac*len(dfs)):], '-'); plt.plot(dGs[int(dropinifac*len(dfs)):], '-');
#plt.subplot(222); plt.plot(-dfs[int(dropinifac*len(dfs)):],dGs[int(dropinifac*len(dfs)):], '-'); 
##f = plt.figure(figsize=(15,15))
#plt.subplot(223); plt.imshow(ux.transpose().real,cmap=cm.Reds);
#plt.subplot(224); plt.imshow(uy.transpose().real,cmap=cm.Reds);

#plt.legend()
#plt.title("Freqs")
#plt.xlabel("T")
#plt.ylabel("F")
#plt.savefig("foo" + ".pdf", format='pdf')
#plt.show()

#
#plt.subplot(); plt.plot(y_arr,ux.real,'-'); plt.plot(y_arr,ux.imag,'-'); 

#plt.subplot(421); plt.imshow(uxsecz.real.transpose(),cmap=cm.Reds); 
#plt.subplot(422); plt.imshow(uysecz.real.transpose(),cmap=cm.Reds);
#plt.subplot(423); plt.imshow(uxsecy.real.transpose(),cmap=cm.Reds);
#plt.subplot(424); plt.imshow(uysecy.real.transpose(),cmap=cm.Reds);
#plt.subplot(425); plt.plot(ux[:,int(ny/2.0),int(nz/2.0)].real,'-'); 
#plt.subplot(426); plt.plot(ux[:,int(ny/2.0),int(nz/2.0)].imag,'-'); 
#plt.subplot(427); plt.plot(ux[int(nx/2.0),int(ny/2.0),:].real,'-'); 
#plt.subplot(428); plt.plot(ux[int(nx/2.0),int(nz/2.0),:].imag,'-'); 




